# Makefile for ELKS images

# include selected config file for image instructions
include $(CONFIG)

include Make.defs

#VERBOSE=-v

# Determine what to build for 'image' target
TARGETS =

ifdef CONFIG_IMG_BOOT
TARGETS += $(FD_MINIX_BOOT) $(FD_FAT_BOOT) $(ELKS_DIR)/arch/i86/boot/Image
endif

ifdef CONFIG_IMG_MINIX
TARGETS += template minixfs
endif

ifdef CONFIG_IMG_FAT
TARGETS += template fatfs
endif

ifdef CONFIG_IMG_ROM
TARGETS += template romfs
endif

ifdef CONFIG_IMG_RAW
TARGETS += raw
endif

.PHONY: image $(TARGETS)

image: $(TARGETS)

copyminix: minixfs

copyfat: fatfs

copyrom: romfs

# Populate template for filesystem genfs

template:
	-rm -rf $(DESTDIR)
	cp -a $(TEMPLATE_DIR) $(DESTDIR)
	find $(DESTDIR) -name .keep -delete
	$(MAKE) -C $(ELKSCMD_DIR) -f Make.install install "CONFIG=$(CONFIG)"
ifdef CONFIG_APPS_COMPRESS
	cd $(TOPDIR)/target/bin; elks-compress *
endif
	$(MAKE) -C $(BOOTBLOCKS_DIR)
	bash -c "./ver.pl $(ELKS_DIR)/Makefile-rules > $(DESTDIR)/etc/issue"
	git log --abbrev-commit | head -1 | sed 's/commit/ELKS built from commit/' > $(DESTDIR)/etc/motd
ifdef CONFIG_IMG_BOOT
	install $(ELKS_DIR)/arch/i86/boot/Image $(DESTDIR)/linux
endif

# Create MINIX filesystem from template

# Create bootable ELKS MINIX disk image:
#	Select tagged files into filelist
#	Create empty filesystem
#	Add tagged files into filesystem (regular, directories, links)
#	Create special files in /dev
#	Write boot sector (and modify BPB (not completed))
#	Check image integrity
#	Print filesystem used inode and block count

minixfs:
	rm -f $(TARGET_FILE)
	mfs $(VERBOSE) $(TARGET_FILE) genfs $(MINIX_MKFSOPTS) $(DESTDIR)
ifdef CONFIG_IMG_DEV
	# command to make char/block devices in image (no sudo required)
	$(MAKE) -f Make.devices "MKDEV=mfs $(TARGET_FILE) mknod"
endif
ifdef CONFIG_IMG_BOOT
	setboot $(TARGET_FILE) $(BPB) $(FD_MINIX_BOOT)
endif
	mfsck -fv $(TARGET_FILE)
	mfs $(TARGET_FILE) stat

# Create FAT filesystem from template

# Create bootable ELKS MSDOS disk image:
#	Select tagged files into filelist
#	Create empty filesystem
#	Create \linux as first directory entry
#	Add tagged files into filesystem (regular, directories, links)
#		Filename case is preserved
#		Note: filenames larger than 8.3 will create VFAT LFN entries
#	Write boot sector and modify ELKS PB
# all mtools commands require image file
# -i image	image filename

fatfs:
	rm -f $(TARGET_FILE)
	dd if=/dev/zero of=$(TARGET_FILE) bs=1024 count=$(TARGET_BLKS)
	mformat -i $(TARGET_FILE) $(FAT_MKFSOPTS)
	# Linux has to be the first file for the boot sector loader
	rm -f linux; touch linux
	mcopy -i $(TARGET_FILE) $(CPFS_OPTS) linux ::/linux
	rm linux
ifdef CONFIG_IMG_DEV
	# Device folder has to be first or second for the 'fake dev' to work
	mmd -i $(TARGET_FILE) ::/dev
endif
	for f in $$(cd $(DESTDIR); find * -name '*'); do \
		[ -d $(DESTDIR)/$$f -a "$$f" != "dev" ] && mmd -i $(TARGET_FILE) ::$$f; \
		[ -f $(DESTDIR)/$$f ] && mcopy -i $(TARGET_FILE) $(FAT_COPYOPTS) $(DESTDIR)/$$f ::$$f; \
	done
	# Protect contiguous /linux by marking as RO, System and Hidden
	mattrib -i $(TARGET_FILE) +r +s +h ::/linux
	# Read boot sector, skip FAT BPB, set ELKS PB sectors/heads and write boot
ifdef CONFIG_IMG_BOOT
ifdef CONFIG_IMG_FD1232
	setboot $(TARGET_FILE) -K -F $(BPB) $(FD_FAT_BOOT)
else
	setboot $(TARGET_FILE) -F $(BPB) $(FD_FAT_BOOT)
endif
endif

# Create ROM filesystem from template

romfs:
	-rm -f romfs.devices
	$(MAKE) -f Make.devices "MKDEV=echo >> romfs.devices"
	mkromfs -d romfs.devices $(DESTDIR)

# Create RAW filesystem

raw: $(ELKS_DIR)/arch/i86/boot/Image
	dd if=/dev/zero of=$(TARGET_FILE) bs=1024 count=$(TARGET_BLKS)
	dd if=$(ELKS_DIR)/arch/i86/boot/Image of=$(TARGET_FILE) conv=notrunc
