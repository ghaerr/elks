# Sample initialization file for GNU nano
# Please note that you must have configured nano with 
# --enable-nanorc for this file to be read!

# Use regular expressions by default 
# set regexp 

# Constantly update the cursor position
# set const

# Use cut to end of line with ^K by default
# set cut

# Use Auto-indentation
# set autoindent

# Don't follow symlinks when writing files
# set nofollow

# Set operating directory (chroot of sorts)
# set operatingdir "~"

# Use Pico Compatibility mode for the shortcut lists and search text
# set pico

# Use this value instead of the default
# set fill -8

# Use this tab size instead of the default
# set tabsize 4

# Use this spelling checker instead of the default one
# set speller aspell

# Save automatically on exit, don't prompt
# set tempfile

# Disallow file modification, why would you want this in an rc file? ;)
# set view

# Don't wrap text at all
# set nowrap

# Don't display the help lists at the bottom of the screen
# set nohelp

# Allow nano to be suspended with ^Z
# set suspend

# Use smooth scrolling as the default
# set smooth

# Allow multiple file buffers (using ^R inserts into separate buffer)
# You must have configured with --enable-multibuffer or --enable-extra for
# this to work
#
# set multibuffer

#
# Color setup
# Format: color foreground,background "regex" ["regex"...]
#
# Legal colors are: white, black, red, blue, green, yellow, purple, cyan
# You may use the prefix "bright" to mean a stronger color highlight
#
# To use multi-line regexes use the start="regex" end="regex" format.
#
# If your system supports transparency, not specifying a background
# color will use a transparent color.  If you don't want this, be sure
# to set the background color to black or white.
#
#color brightred "float " "char " "int " "void "  "NULL" "[A-Z_]\{2,\}" 
#color brightred "static" "const" "[\ ]struct" "^struct" "if " "while[\ \n\(]" 
#color brightred "do[\ \n\(]" "else[\ \n]" "case " "switch " "break;"
#color brightcyan "#define" "#include" "#ifn*def" "#endif" "#elif" "#else"

#You will in general want your comments and strings to come last, becase
#syntax highlighting rules will be applied in the order they are read in

#color brightyellow "<.*[^=\ ]*>" "\".*\""
#color brightblue "//.*"
#color brightblue start="/\*.*" end="\*/"

## Here is an example for C/C++.
##
#syntax "C" "\.(c(c|pp|xx)?|C)$" "\.(h(h|pp|xx)?|H)$" "\.ii?$" "\.(def)$" "\.ino"
#magic "^(C|C\+\+) (source|program)"
#comment "//"
#color brightred "\<[A-Z_][0-9A-Z_]+\>"
#color green "\<(float|double|bool|char|wchar_t|int|short|long|sizeof|enum|void|static|const|struct|union|typedef|extern|(un)?signed|inline)\>"
#color green "\<((s?size)|(char(16|32))|((u_?)?int(_fast|_least)?(8|16|32|64))|u?int(max|ptr))_t\>"
#color green "\<(class|namespace|template|public|protected|private|typename|this|friend|virtual|using|mutable|volatile|register|explicit)\>"
#color green "\<(for|if|while|do|else|case|default|switch)\>"
#color green "\<(try|throw|catch|operator|new|delete)\>"
#color green "\<((const|dynamic|reinterpret|static)_cast)\>"
#color green "\<(alignas|alignof|asm|auto|compl|concept|constexpr|decltype|export|noexcept|nullptr|requires|static_assert|thread_local|typeid|override|final)\>"
#color green "\<(and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\>"
#color brightmagenta "\<(goto|continue|break|return)\>"
#color brightcyan "^[[:space:]]*#[[:space:]]*(define|include|(un|ifn?)def|endif|el(if|se)|if|warning|error)"
#color brightmagenta "'([^'\]|(\\["'abfnrtv\\]))'" "'\\(([0-3]?[0-7]{1,2}))'" "'\\x[0-9A-Fa-f]{1,2}'"

##
## GCC builtins
#color green "__attribute__[[:space:]]*\(\([^)]*\)\)" "__(aligned|asm|builtin|hidden|inline|packed|restrict|section|typeof|weak)__"

#Operator Color
#color yellow "[.:;,+*|=!\%]" "<" ">" "/" "-" "&"

#Parenthetical Color
#color magenta "[(){}]" "\[" "\]"


##
## String highlighting.  You will in general want your comments and
## strings to come last, because syntax highlighting rules will be
## applied in the order they are read in.
#color cyan "<[^= 	]*>" ""(\\.|[^"])*""
##
## This string is VERY resource intensive!
#color cyan start=""(\\.|[^"])*\\[[:space:]]*$" end="^(\\.|[^"])*""

## printf-family format specifiers
#color yellow "%(\#|(0-+))?(hh|h|l|ll|q|L|j|z|Z|t)?[A-Za-z]" "%%"

## Comment highlighting
#color brightblue "//.*"
#color brightblue start="/\*" end="\*/"

# Highlighting for documentation comments
#color magenta "@param [a-zA-Z_][a-z0-9A-Z_]+"
#color magenta "@return"
#color magenta "@author.*"

## Trailing whitespace
#color ,green "[[:space:]]+$"
